{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Spam Detection con RNN","provenance":[{"file_id":"1giEoGZzUO_59rDxdxTwpqb2d3gZOJNeH","timestamp":1590178761582}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"7ZjhmiCi66lb","colab_type":"code","colab":{}},"source":["import tensorflow as tf\n","\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sklearn.model_selection import train_test_split\n","\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.layers import Dense, Input, GlobalMaxPooling1D\n","from tensorflow.keras.layers import LSTM, Embedding\n","from tensorflow.keras.models import Model"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9Shv7Pyi9iON","colab_type":"code","outputId":"dcd556ce-fc59-475a-982b-c5e44ee96a38","executionInfo":{"status":"ok","timestamp":1590178834614,"user_tz":180,"elapsed":4785,"user":{"displayName":"Santiago Balay","photoUrl":"","userId":"05444251609658637719"}},"colab":{"base_uri":"https://localhost:8080/","height":51}},"source":["!wget -nc https://lazyprogrammer.me/course_files/spam.csv #spam csv generico"],"execution_count":8,"outputs":[{"output_type":"stream","text":["File ‘spam.csv’ already there; not retrieving.\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2X3TBMqM7HBT","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":255},"outputId":"5e900f3b-bf02-4c2b-e185-7cd66ba181b7","executionInfo":{"status":"ok","timestamp":1590179450169,"user_tz":180,"elapsed":1220,"user":{"displayName":"Santiago Balay","photoUrl":"","userId":"05444251609658637719"}}},"source":["df = pd.read_csv('spam.csv', encoding='ISO-8859-1') \n","print(df)"],"execution_count":28,"outputs":[{"output_type":"stream","text":["        v1  ... Unnamed: 4\n","0      ham  ...        NaN\n","1      ham  ...        NaN\n","2     spam  ...        NaN\n","3      ham  ...        NaN\n","4      ham  ...        NaN\n","...    ...  ...        ...\n","5567  spam  ...        NaN\n","5568   ham  ...        NaN\n","5569   ham  ...        NaN\n","5570   ham  ...        NaN\n","5571   ham  ...        NaN\n","\n","[5572 rows x 5 columns]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"OliYFF7F9Rx9","colab_type":"code","outputId":"b73c6f71-5e2e-4fe2-dc16-20149f6bc065","executionInfo":{"status":"ok","timestamp":1590178815174,"user_tz":180,"elapsed":1356,"user":{"displayName":"Santiago Balay","photoUrl":"","userId":"05444251609658637719"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["df.head()"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>v1</th>\n","      <th>v2</th>\n","      <th>Unnamed: 2</th>\n","      <th>Unnamed: 3</th>\n","      <th>Unnamed: 4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ham</td>\n","      <td>Go until jurong point, crazy.. Available only ...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ham</td>\n","      <td>Ok lar... Joking wif u oni...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>spam</td>\n","      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ham</td>\n","      <td>U dun say so early hor... U c already then say...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ham</td>\n","      <td>Nah I don't think he goes to usf, he lives aro...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     v1  ... Unnamed: 4\n","0   ham  ...        NaN\n","1   ham  ...        NaN\n","2  spam  ...        NaN\n","3   ham  ...        NaN\n","4   ham  ...        NaN\n","\n","[5 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"keaeAYpz9rOm","colab_type":"code","colab":{}},"source":["df = df.drop([\"Unnamed: 2\", \"Unnamed: 3\", \"Unnamed: 4\"], axis=1)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"lvS0Tvlk9sQu","colab_type":"code","outputId":"347fd34f-18f0-411a-a622-015cfdfc87e0","executionInfo":{"status":"ok","timestamp":1590178922504,"user_tz":180,"elapsed":1091,"user":{"displayName":"Santiago Balay","photoUrl":"","userId":"05444251609658637719"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["df.head()"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>v1</th>\n","      <th>v2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ham</td>\n","      <td>Go until jurong point, crazy.. Available only ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ham</td>\n","      <td>Ok lar... Joking wif u oni...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>spam</td>\n","      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ham</td>\n","      <td>U dun say so early hor... U c already then say...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ham</td>\n","      <td>Nah I don't think he goes to usf, he lives aro...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     v1                                                 v2\n","0   ham  Go until jurong point, crazy.. Available only ...\n","1   ham                      Ok lar... Joking wif u oni...\n","2  spam  Free entry in 2 a wkly comp to win FA Cup fina...\n","3   ham  U dun say so early hor... U c already then say...\n","4   ham  Nah I don't think he goes to usf, he lives aro..."]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"GNTZG5OW9u2b","colab_type":"code","colab":{}},"source":["df.columns = ['labels', 'data']"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"w2OLDmdi9yUH","colab_type":"code","outputId":"517ac1c8-e5a5-4a80-d01a-c67759803863","executionInfo":{"status":"ok","timestamp":1590178935927,"user_tz":180,"elapsed":1394,"user":{"displayName":"Santiago Balay","photoUrl":"","userId":"05444251609658637719"}},"colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["df.head()"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>labels</th>\n","      <th>data</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ham</td>\n","      <td>Go until jurong point, crazy.. Available only ...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ham</td>\n","      <td>Ok lar... Joking wif u oni...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>spam</td>\n","      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ham</td>\n","      <td>U dun say so early hor... U c already then say...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ham</td>\n","      <td>Nah I don't think he goes to usf, he lives aro...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  labels                                               data\n","0    ham  Go until jurong point, crazy.. Available only ...\n","1    ham                      Ok lar... Joking wif u oni...\n","2   spam  Free entry in 2 a wkly comp to win FA Cup fina...\n","3    ham  U dun say so early hor... U c already then say...\n","4    ham  Nah I don't think he goes to usf, he lives aro..."]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"mbEYhaMz9zkB","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":204},"outputId":"4ab92da0-72dc-41b7-f969-3ff2f4f40b88","executionInfo":{"status":"ok","timestamp":1590178968575,"user_tz":180,"elapsed":1179,"user":{"displayName":"Santiago Balay","photoUrl":"","userId":"05444251609658637719"}}},"source":["df['b_labels'] = df['labels'].map({'ham': 0, 'spam': 1})\n","Y = df['b_labels'].values\n","df.head()"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>labels</th>\n","      <th>data</th>\n","      <th>b_labels</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>ham</td>\n","      <td>Go until jurong point, crazy.. Available only ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>ham</td>\n","      <td>Ok lar... Joking wif u oni...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>spam</td>\n","      <td>Free entry in 2 a wkly comp to win FA Cup fina...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ham</td>\n","      <td>U dun say so early hor... U c already then say...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>ham</td>\n","      <td>Nah I don't think he goes to usf, he lives aro...</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  labels                                               data  b_labels\n","0    ham  Go until jurong point, crazy.. Available only ...         0\n","1    ham                      Ok lar... Joking wif u oni...         0\n","2   spam  Free entry in 2 a wkly comp to win FA Cup fina...         1\n","3    ham  U dun say so early hor... U c already then say...         0\n","4    ham  Nah I don't think he goes to usf, he lives aro...         0"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"id":"tKJU_DZU91bc","colab_type":"code","colab":{}},"source":["df_train, df_test, Ytrain, Ytest = train_test_split(df['data'], Y, test_size=0.33)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"WIOc5vxr9_iJ","colab_type":"code","colab":{}},"source":["MAX_VOCAB_SIZE = 20000\n","tokenizer = Tokenizer(num_words=MAX_VOCAB_SIZE)\n","tokenizer.fit_on_texts(df_train)\n","sequences_train = tokenizer.texts_to_sequences(df_train)\n","sequences_test = tokenizer.texts_to_sequences(df_test)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Zjyf7BGE-QZN","colab_type":"code","outputId":"a0c0260c-55a0-41ce-cbcd-afd2a1a37b63","executionInfo":{"status":"ok","timestamp":1590179029373,"user_tz":180,"elapsed":1226,"user":{"displayName":"Santiago Balay","photoUrl":"","userId":"05444251609658637719"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["word2idx = tokenizer.word_index\n","V = len(word2idx)\n","print('%s tokens.' % V)"],"execution_count":21,"outputs":[{"output_type":"stream","text":["7261 tokens.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"NP1W8Cf9-cPo","colab_type":"code","outputId":"5a37227b-f096-4eca-9614-6804eebc25b6","executionInfo":{"status":"ok","timestamp":1590179065250,"user_tz":180,"elapsed":1019,"user":{"displayName":"Santiago Balay","photoUrl":"","userId":"05444251609658637719"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Le agrego padding para armar bien el vector NxT\n","data_train = pad_sequences(sequences_train)\n","print('Shape of data train tensor:', data_train.shape)\n","\n","T = data_train.shape[1]"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Shape of data train tensor: (3733, 189)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"b6He4SKO-qci","colab_type":"code","outputId":"1792ceac-6bbc-4d21-9a4c-df04b07e99cc","executionInfo":{"status":"ok","timestamp":1590179071802,"user_tz":180,"elapsed":998,"user":{"displayName":"Santiago Balay","photoUrl":"","userId":"05444251609658637719"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["data_test = pad_sequences(sequences_test, maxlen=T) #corto el test set para el modelo que estoy armando\n","print('Shape of data test tensor:', data_test.shape)"],"execution_count":23,"outputs":[{"output_type":"stream","text":["Shape of data test tensor: (1839, 189)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sFnA0eiI-2BM","colab_type":"code","colab":{}},"source":["D = 20 #dimension del embedding. Lo que quiera\n","\n","M = 15 #hidden dim\n","\n","# Note: we actually want to the size of the embedding to (V + 1) x D,\n","# because the first index starts from 1 and not 0.\n","# Thus, if the final index of the embedding matrix is V,\n","# then it actually must have size V + 1.\n","\n","i = Input(shape=(T,))\n","x = Embedding(V + 1, D)(i) #el primer index del word2inx empieza en 1 y no 0 -> +1, porque empiezan el 0 en py\n","x = LSTM(M, return_sequences=True)(x)\n","x = GlobalMaxPooling1D()(x) #bueno para long term dependencies\n","x = Dense(1, activation='sigmoid')(x)\n","\n","model = Model(i, x)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"DyBTI9wr_cvG","colab_type":"code","outputId":"4c5b1d2b-5a47-4315-a544-47385b6ef722","executionInfo":{"status":"ok","timestamp":1590180944791,"user_tz":180,"elapsed":21651,"user":{"displayName":"Santiago Balay","photoUrl":"","userId":"05444251609658637719"}},"colab":{"base_uri":"https://localhost:8080/","height":357}},"source":["model.compile(\n","  loss='binary_crossentropy',\n","  optimizer='adam',\n","  metrics=['accuracy']\n",")\n","\n","r = model.fit(\n","  data_train,\n","  Ytrain,\n","  epochs=10,\n","  validation_data=(data_test, Ytest)\n",")"],"execution_count":29,"outputs":[{"output_type":"stream","text":["Epoch 1/10\n","117/117 [==============================] - 2s 20ms/step - loss: 0.0143 - accuracy: 0.9962 - val_loss: 0.0477 - val_accuracy: 0.9880\n","Epoch 2/10\n","117/117 [==============================] - 2s 16ms/step - loss: 0.0105 - accuracy: 0.9976 - val_loss: 0.0478 - val_accuracy: 0.9891\n","Epoch 3/10\n","117/117 [==============================] - 2s 15ms/step - loss: 0.0087 - accuracy: 0.9981 - val_loss: 0.0501 - val_accuracy: 0.9880\n","Epoch 4/10\n","117/117 [==============================] - 2s 15ms/step - loss: 0.0073 - accuracy: 0.9981 - val_loss: 0.0476 - val_accuracy: 0.9918\n","Epoch 5/10\n","117/117 [==============================] - 2s 16ms/step - loss: 0.0049 - accuracy: 0.9989 - val_loss: 0.0473 - val_accuracy: 0.9918\n","Epoch 6/10\n","117/117 [==============================] - 2s 16ms/step - loss: 0.0041 - accuracy: 0.9992 - val_loss: 0.0474 - val_accuracy: 0.9908\n","Epoch 7/10\n","117/117 [==============================] - 2s 16ms/step - loss: 0.0034 - accuracy: 0.9997 - val_loss: 0.0471 - val_accuracy: 0.9902\n","Epoch 8/10\n","117/117 [==============================] - 2s 15ms/step - loss: 0.0028 - accuracy: 0.9997 - val_loss: 0.0498 - val_accuracy: 0.9908\n","Epoch 9/10\n","117/117 [==============================] - 2s 16ms/step - loss: 0.0024 - accuracy: 0.9997 - val_loss: 0.0492 - val_accuracy: 0.9902\n","Epoch 10/10\n","117/117 [==============================] - 2s 16ms/step - loss: 0.0020 - accuracy: 0.9997 - val_loss: 0.0509 - val_accuracy: 0.9897\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"j636obn9CE7A","colab_type":"code","outputId":"1b138fc3-c27f-421b-8b0d-d05e1e59a647","executionInfo":{"status":"ok","timestamp":1590180945558,"user_tz":180,"elapsed":19239,"user":{"displayName":"Santiago Balay","photoUrl":"","userId":"05444251609658637719"}},"colab":{"base_uri":"https://localhost:8080/","height":282}},"source":["import matplotlib.pyplot as plt\n","plt.plot(r.history['loss'], label='loss')\n","plt.plot(r.history['val_loss'], label='val_loss')\n","plt.legend()"],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7ff61e6a0ba8>"]},"metadata":{"tags":[]},"execution_count":30},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"QIK6WwUNCGlR","colab_type":"code","outputId":"6156d990-903e-4c2b-f6d1-48e89b61cf28","executionInfo":{"status":"ok","timestamp":1590180945559,"user_tz":180,"elapsed":17827,"user":{"displayName":"Santiago Balay","photoUrl":"","userId":"05444251609658637719"}},"colab":{"base_uri":"https://localhost:8080/","height":282}},"source":["plt.plot(r.history['accuracy'], label='acc')\n","plt.plot(r.history['val_accuracy'], label='val_acc')\n","plt.legend()\n","\n","#casi 100% accuracy, y en 10 epochs"],"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7ff61d655ef0>"]},"metadata":{"tags":[]},"execution_count":31},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]}]}